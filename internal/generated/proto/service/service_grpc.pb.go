// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: service/service.proto

package codewars

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Codewars_GetUserInfo_FullMethodName  = "/codewars.Codewars/GetUserInfo"
	Codewars_GetUserStats_FullMethodName = "/codewars.Codewars/GetUserStats"
)

// CodewarsClient is the client API for Codewars service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodewarsClient interface {
	GetUserInfo(ctx context.Context, in *GetUserInfoIn, opts ...grpc.CallOption) (*GetUserInfoOut, error)
	GetUserStats(ctx context.Context, in *GetUserStatsIn, opts ...grpc.CallOption) (*GetUserStatsOut, error)
}

type codewarsClient struct {
	cc grpc.ClientConnInterface
}

func NewCodewarsClient(cc grpc.ClientConnInterface) CodewarsClient {
	return &codewarsClient{cc}
}

func (c *codewarsClient) GetUserInfo(ctx context.Context, in *GetUserInfoIn, opts ...grpc.CallOption) (*GetUserInfoOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoOut)
	err := c.cc.Invoke(ctx, Codewars_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codewarsClient) GetUserStats(ctx context.Context, in *GetUserStatsIn, opts ...grpc.CallOption) (*GetUserStatsOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserStatsOut)
	err := c.cc.Invoke(ctx, Codewars_GetUserStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodewarsServer is the server API for Codewars service.
// All implementations must embed UnimplementedCodewarsServer
// for forward compatibility.
type CodewarsServer interface {
	GetUserInfo(context.Context, *GetUserInfoIn) (*GetUserInfoOut, error)
	GetUserStats(context.Context, *GetUserStatsIn) (*GetUserStatsOut, error)
	mustEmbedUnimplementedCodewarsServer()
}

// UnimplementedCodewarsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCodewarsServer struct{}

func (UnimplementedCodewarsServer) GetUserInfo(context.Context, *GetUserInfoIn) (*GetUserInfoOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedCodewarsServer) GetUserStats(context.Context, *GetUserStatsIn) (*GetUserStatsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserStats not implemented")
}
func (UnimplementedCodewarsServer) mustEmbedUnimplementedCodewarsServer() {}
func (UnimplementedCodewarsServer) testEmbeddedByValue()                  {}

// UnsafeCodewarsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodewarsServer will
// result in compilation errors.
type UnsafeCodewarsServer interface {
	mustEmbedUnimplementedCodewarsServer()
}

func RegisterCodewarsServer(s grpc.ServiceRegistrar, srv CodewarsServer) {
	// If the following call pancis, it indicates UnimplementedCodewarsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Codewars_ServiceDesc, srv)
}

func _Codewars_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodewarsServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Codewars_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodewarsServer).GetUserInfo(ctx, req.(*GetUserInfoIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Codewars_GetUserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserStatsIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodewarsServer).GetUserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Codewars_GetUserStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodewarsServer).GetUserStats(ctx, req.(*GetUserStatsIn))
	}
	return interceptor(ctx, in, info, handler)
}

// Codewars_ServiceDesc is the grpc.ServiceDesc for Codewars service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Codewars_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codewars.Codewars",
	HandlerType: (*CodewarsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _Codewars_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUserStats",
			Handler:    _Codewars_GetUserStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/service.proto",
}
